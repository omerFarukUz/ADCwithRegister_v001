
ADCwithRegister_v001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000032c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d8  080004d8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d8  080004d8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004d8  080004d8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d8  080004d8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d8  080004d8  000104d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004dc  080004dc  000104dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004e0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   000014b2  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004fa  00000000  00000000  00021529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001f0  00000000  00000000  00021a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000015d  00000000  00000000  00021c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000232fc  00000000  00000000  00021d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000024df  00000000  00000000  00045071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8600  00000000  00000000  00047550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000005f0  00000000  00000000  0011fb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00120140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080004c0 	.word	0x080004c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	080004c0 	.word	0x080004c0

080001ec <RCC_Config>:

uint8_t adc_value;


void RCC_Config()
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	RCC->CR |= 0x10000; 			  // HSEON enable
 80001f0:	4b24      	ldr	r3, [pc, #144]	; (8000284 <RCC_Config+0x98>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a23      	ldr	r2, [pc, #140]	; (8000284 <RCC_Config+0x98>)
 80001f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001fa:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x20000));      // HSEON Ready Flag wait
 80001fc:	bf00      	nop
 80001fe:	4b21      	ldr	r3, [pc, #132]	; (8000284 <RCC_Config+0x98>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000206:	2b00      	cmp	r3, #0
 8000208:	d0f9      	beq.n	80001fe <RCC_Config+0x12>
	RCC->CR |= 0x80000;				  // CSS enable
 800020a:	4b1e      	ldr	r3, [pc, #120]	; (8000284 <RCC_Config+0x98>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a1d      	ldr	r2, [pc, #116]	; (8000284 <RCC_Config+0x98>)
 8000210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000214:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x400000; 		  // PLL e HSE sectik
 8000216:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <RCC_Config+0x98>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4a1a      	ldr	r2, [pc, #104]	; (8000284 <RCC_Config+0x98>)
 800021c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000220:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x000004; 		  // PLL M = 4
 8000222:	4b18      	ldr	r3, [pc, #96]	; (8000284 <RCC_Config+0x98>)
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	4a17      	ldr	r2, [pc, #92]	; (8000284 <RCC_Config+0x98>)
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x005A00; 		  // PLL N=168
 800022e:	4b15      	ldr	r3, [pc, #84]	; (8000284 <RCC_Config+0x98>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4a14      	ldr	r2, [pc, #80]	; (8000284 <RCC_Config+0x98>)
 8000234:	f443 43b4 	orr.w	r3, r3, #23040	; 0x5a00
 8000238:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x000000; 		  // PLL P=2
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <RCC_Config+0x98>)
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <RCC_Config+0x98>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x000000; 		 	  // AHB Prescaler = 1
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <RCC_Config+0x98>)
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <RCC_Config+0x98>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x080000; 		  	  // APB2 Prescaler = 2
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <RCC_Config+0x98>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <RCC_Config+0x98>)
 8000250:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000254:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x001400; 		  	  // APB1 Presclaer = 4
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <RCC_Config+0x98>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <RCC_Config+0x98>)
 800025c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000260:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00080000;			  // HSERDY Flag Clear
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <RCC_Config+0x98>)
 8000264:	68db      	ldr	r3, [r3, #12]
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <RCC_Config+0x98>)
 8000268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800026c:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000;			  // CSS Flag Clear
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <RCC_Config+0x98>)
 8000270:	68db      	ldr	r3, [r3, #12]
 8000272:	4a04      	ldr	r2, [pc, #16]	; (8000284 <RCC_Config+0x98>)
 8000274:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000278:	60d3      	str	r3, [r2, #12]

}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40023800 	.word	0x40023800

08000288 <GPIO_Config>:

void GPIO_Config()
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x01;             // GPIOA port clock enable
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <GPIO_Config+0x34>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <GPIO_Config+0x34>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= 0x03;			  // analog pin selected pin 0
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <GPIO_Config+0x38>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <GPIO_Config+0x38>)
 800029e:	f043 0303 	orr.w	r3, r3, #3
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0x03;			  // output selected high speed
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <GPIO_Config+0x38>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <GPIO_Config+0x38>)
 80002aa:	f043 0303 	orr.w	r3, r3, #3
 80002ae:	6093      	str	r3, [r2, #8]
	//GPIOA->PUPDR |= 0x02;			  // GPIOA selected pull-down

}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020000 	.word	0x40020000

080002c4 <ADC_Config>:


void ADC_Config()
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 0x100;			                  // ADC1 Clock enable
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <ADC_Config+0x4c>)
 80002ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <ADC_Config+0x4c>)
 80002ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d2:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1->CR1 |= 0x2000000;			                  // ADC resolution choose 8 bit
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <ADC_Config+0x50>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <ADC_Config+0x50>)
 80002da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002de:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= ADC_CR2_ADON << 0x01;				  // Enable ADC (ADON = 1)
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <ADC_Config+0x50>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <ADC_Config+0x50>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2 |= 0x02;			                  // ADC Sample 28 cycles
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <ADC_Config+0x50>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a08      	ldr	r2, [pc, #32]	; (8000314 <ADC_Config+0x50>)
 80002f2:	f043 0302 	orr.w	r3, r3, #2
 80002f6:	6113      	str	r3, [r2, #16]
	ADC->CCR |= 0x10000;							  // Div 4
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <ADC_Config+0x54>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a06      	ldr	r2, [pc, #24]	; (8000318 <ADC_Config+0x54>)
 80002fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000302:	6053      	str	r3, [r2, #4]

}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800
 8000314:	40012000 	.word	0x40012000
 8000318:	40012300 	.word	0x40012300

0800031c <Read_ADC>:

uint8_t Read_ADC()
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
	uint8_t value;
	ADC1->CR2 |= ADC_CR2_ADON << 0x01;				  // Enable ADC (ADON = 1)
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <Read_ADC+0x40>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	4a0d      	ldr	r2, [pc, #52]	; (800035c <Read_ADC+0x40>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	6093      	str	r3, [r2, #8]

	ADC1->CR2 |= 0x40000000;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <Read_ADC+0x40>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <Read_ADC+0x40>)
 8000334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000338:	6093      	str	r3, [r2, #8]
	while(ADC1->SR & 0x0002);
 800033a:	bf00      	nop
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <Read_ADC+0x40>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f003 0302 	and.w	r3, r3, #2
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1f9      	bne.n	800033c <Read_ADC+0x20>

	value = ADC1->DR ;
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <Read_ADC+0x40>)
 800034a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034c:	71fb      	strb	r3, [r7, #7]

	return value;
 800034e:	79fb      	ldrb	r3, [r7, #7]

}
 8000350:	4618      	mov	r0, r3
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	40012000 	.word	0x40012000

08000360 <main>:

int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

  RCC_Config();
 8000364:	f7ff ff42 	bl	80001ec <RCC_Config>
  GPIO_Config();
 8000368:	f7ff ff8e 	bl	8000288 <GPIO_Config>
  ADC_Config();
 800036c:	f7ff ffaa 	bl	80002c4 <ADC_Config>


  while (1)
  {

	  adc_value = Read_ADC();
 8000370:	f7ff ffd4 	bl	800031c <Read_ADC>
 8000374:	4603      	mov	r3, r0
 8000376:	461a      	mov	r2, r3
 8000378:	4b01      	ldr	r3, [pc, #4]	; (8000380 <main+0x20>)
 800037a:	701a      	strb	r2, [r3, #0]
 800037c:	e7f8      	b.n	8000370 <main+0x10>
 800037e:	bf00      	nop
 8000380:	20000020 	.word	0x20000020

08000384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000388:	e7fe      	b.n	8000388 <NMI_Handler+0x4>

0800038a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800038e:	e7fe      	b.n	800038e <HardFault_Handler+0x4>

08000390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000394:	e7fe      	b.n	8000394 <MemManage_Handler+0x4>

08000396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039a:	e7fe      	b.n	800039a <BusFault_Handler+0x4>

0800039c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <UsageFault_Handler+0x4>

080003a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d0:	f000 f83e 	bl	8000450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <SystemInit+0x20>)
 80003de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003e2:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <SystemInit+0x20>)
 80003e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000ed00 	.word	0xe000ed00

080003fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80003fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000434 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000400:	f7ff ffea 	bl	80003d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000404:	480c      	ldr	r0, [pc, #48]	; (8000438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000406:	490d      	ldr	r1, [pc, #52]	; (800043c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000408:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800041c:	4c0a      	ldr	r4, [pc, #40]	; (8000448 <LoopFillZerobss+0x22>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800042a:	f000 f825 	bl	8000478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800042e:	f7ff ff97 	bl	8000360 <main>
  bx  lr    
 8000432:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000434:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000440:	080004e0 	.word	0x080004e0
  ldr r2, =_sbss
 8000444:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000448:	20000028 	.word	0x20000028

0800044c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC_IRQHandler>
	...

08000450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <HAL_IncTick+0x20>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <HAL_IncTick+0x24>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4413      	add	r3, r2
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <HAL_IncTick+0x24>)
 8000462:	6013      	str	r3, [r2, #0]
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	20000000 	.word	0x20000000
 8000474:	20000024 	.word	0x20000024

08000478 <__libc_init_array>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	4d0d      	ldr	r5, [pc, #52]	; (80004b0 <__libc_init_array+0x38>)
 800047c:	4c0d      	ldr	r4, [pc, #52]	; (80004b4 <__libc_init_array+0x3c>)
 800047e:	1b64      	subs	r4, r4, r5
 8000480:	10a4      	asrs	r4, r4, #2
 8000482:	2600      	movs	r6, #0
 8000484:	42a6      	cmp	r6, r4
 8000486:	d109      	bne.n	800049c <__libc_init_array+0x24>
 8000488:	4d0b      	ldr	r5, [pc, #44]	; (80004b8 <__libc_init_array+0x40>)
 800048a:	4c0c      	ldr	r4, [pc, #48]	; (80004bc <__libc_init_array+0x44>)
 800048c:	f000 f818 	bl	80004c0 <_init>
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	10a4      	asrs	r4, r4, #2
 8000494:	2600      	movs	r6, #0
 8000496:	42a6      	cmp	r6, r4
 8000498:	d105      	bne.n	80004a6 <__libc_init_array+0x2e>
 800049a:	bd70      	pop	{r4, r5, r6, pc}
 800049c:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a0:	4798      	blx	r3
 80004a2:	3601      	adds	r6, #1
 80004a4:	e7ee      	b.n	8000484 <__libc_init_array+0xc>
 80004a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004aa:	4798      	blx	r3
 80004ac:	3601      	adds	r6, #1
 80004ae:	e7f2      	b.n	8000496 <__libc_init_array+0x1e>
 80004b0:	080004d8 	.word	0x080004d8
 80004b4:	080004d8 	.word	0x080004d8
 80004b8:	080004d8 	.word	0x080004d8
 80004bc:	080004dc 	.word	0x080004dc

080004c0 <_init>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr

080004cc <_fini>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	bf00      	nop
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr
